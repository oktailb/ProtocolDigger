# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v3

    - name: Install PCAP library
      if: runner.os == 'Linux'
      run: |
        sudo apt-get -y install libpcap-dev

    - name: Install QT6 library
      if: runner.os == 'Linux'
      run: |
        sudo apt-get -y install qt6-3d-assimpsceneimport-plugin qt6-3d-defaultgeometryloader-plugin qt6-3d-dev qt6-3d-doc qt6-3d-doc-dev qt6-3d-doc-html qt6-3d-examples qt6-3d-gltfsceneio-plugin qt6-3d-scene2d-plugin qt6-5compat-dev qt6-5compat-doc qt6-5compat-doc-html qt6-5compat-examples qt6-base-dev qt6-base-dev-tools qt6-base-doc qt6-base-doc-dev qt6-base-doc-html qt6-base-examples qt6-base-private-dev qt6-charts-dev qt6-charts-doc qt6-charts-doc-html qt6-charts-examples qt6-connectivity-dev qt6-connectivity-doc qt6-connectivity-doc-html qt6-connectivity-examples qt6-datavis3d-dev qt6-datavis3d-doc qt6-datavis3d-doc-html qt6-datavis3d-examples qt6-declarative-dev qt6-declarative-dev-tools qt6-declarative-doc qt6-declarative-doc-dev qt6-declarative-doc-html qt6-declarative-examples qt6-declarative-private-dev qt6-documentation-tools qt6-grpc-dev qt6-grpc-doc qt6-grpc-doc-dev qt6-grpc-doc-html qt6-grpc-examples qt6-grpc-tools qt6-gtk-platformtheme qt6-httpserver-dev qt6-httpserver-doc qt6-httpserver-doc-html qt6-httpserver-examples qt6-image-formats-plugin-pdf qt6-image-formats-plugins qt6-imageformats-doc qt6-imageformats-doc-html qt6-l10n-tools qt6-languageserver-dev qt6-languageserver-private-dev qt6-location-dev qt6-location-doc qt6-location-doc-dev qt6-location-doc-html qt6-location-examples qt6-location-plugins qt6-lottie-dev qt6-multimedia-dev qt6-multimedia-doc qt6-multimedia-doc-html qt6-multimedia-examples qt6-networkauth-dev qt6-networkauth-doc qt6-networkauth-doc-dev qt6-networkauth-doc-html qt6-networkauth-examples qt6-pdf-dev qt6-positioning-dev qt6-positioning-doc qt6-positioning-doc-dev qt6-positioning-doc-html qt6-positioning-examples qt6-positioning-private-dev qt6-qmllint-plugins qt6-qmltooling-plugins qt6-qmltooling-quick3dprofiler-plugin qt6-qpa-plugins qt6-quick3d-assetimporters-plugin qt6-quick3d-dev qt6-quick3d-dev-tools qt6-quick3d-doc qt6-quick3d-doc-dev qt6-quick3d-doc-html qt6-quick3d-examples qt6-quick3d-private-dev qt6-quick3dphysics-dev qt6-quick3dphysics-dev-tools qt6-quick3dphysics-examples qt6-quicktimeline-dev qt6-remoteobjects-dev qt6-remoteobjects-doc qt6-remoteobjects-doc-dev qt6-remoteobjects-doc-html qt6-remoteobjects-examples qt6-scxml-dev qt6-scxml-doc qt6-scxml-doc-dev qt6-scxml-doc-html qt6-scxml-examples qt6-sensors-dev qt6-sensors-doc qt6-sensors-doc-dev qt6-sensors-doc-html qt6-sensors-examples qt6-serialbus-dev qt6-serialbus-doc qt6-serialbus-doc-dev qt6-serialbus-doc-html qt6-serialbus-examples qt6-serialport-dev qt6-serialport-doc qt6-serialport-doc-html qt6-serialport-examples qt6-shader-baker qt6-shadertools-dev qt6-shadertools-doc qt6-shadertools-doc-dev qt6-shadertools-doc-html qt6-speech-dev qt6-speech-doc qt6-speech-doc-html qt6-speech-examples qt6-speech-flite-plugin qt6-speech-speechd-plugin qt6-style-kvantum qt6-style-kvantum-l10n qt6-style-kvantum-themes qt6-svg-dev qt6-svg-doc qt6-svg-doc-dev qt6-svg-doc-html qt6-svg-examples qt6-tools-dev qt6-tools-dev-tools qt6-tools-doc qt6-tools-doc-dev qt6-tools-doc-html qt6-tools-examples qt6-tools-private-dev qt6-translations-l10n qt6-virtualkeyboard-dev qt6-virtualkeyboard-doc qt6-virtualkeyboard-doc-html qt6-virtualkeyboard-examples qt6-virtualkeyboard-plugin qt6-wayland qt6-wayland-dev qt6-wayland-dev-tools qt6-wayland-doc qt6-wayland-doc-html qt6-wayland-examples qt6-wayland-private-dev qt6-webchannel-dev qt6-webchannel-doc qt6-webchannel-doc-dev qt6-webchannel-doc-html qt6-webchannel-examples qt6-webengine-dev qt6-webengine-dev-tools qt6-webengine-doc qt6-webengine-doc-dev qt6-webengine-doc-html qt6-webengine-examples qt6-webengine-private-dev qt6-websockets-dev qt6-websockets-doc qt6-websockets-doc-dev qt6-websockets-doc-html qt6-websockets-examples qt6-websockets-private-dev qt6-webview-dev qt6-webview-doc qt6-webview-doc-html qt6-webview-examples qt6-webview-plugins qt6-xdgdesktopportal-platformtheme

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target all package

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
